#!/bin/bash
# ======================================================================================
#  ro – wrapper for Robot Framework runs
#  ↳ places all artefacts in a per-run temp dir under $TMPDIR
#  ↳ symlinks Azure CLI, gcloud SDK and kubeconfig paths to the user's
#     real credential stores so you log in **once** and reuse everywhere
# ======================================================================================

TMPDIR="${TMPDIR:-/tmp/runwhen}"

function ro () {
    # ----------------------------------------------------------------
    # 0) argument parsing  (--test …)  +  default "." target
    # ----------------------------------------------------------------
    if [ $# -eq 0 ]; then
        set -- "."
    fi

    TASKS=()
    POSITIONAL=()
    while [[ $# -gt 0 ]]; do
        case "$1" in
            --test)
                [[ -n "$2" ]] || { echo "Error: --test requires an argument."; exit 1; }
                TASKS+=("--test" "$2")
                shift 2
                ;;
            *)
                POSITIONAL+=("$1")
                shift
                ;;
        esac
    done
    set -- "${POSITIONAL[@]}"          # restore positional args

    ROBOT_FILE_EXECUTING=${!#}         # last positional arg
    real_target="$(realpath "$ROBOT_FILE_EXECUTING")"

    if [ -d "$real_target" ]; then
        RW_SLX="$(basename "$real_target")"
        RW_RFNS="all"
    else
        dir_of_target="$(dirname "$real_target")"
        RW_SLX="$(basename "$dir_of_target")"
        RW_RFNS="$(basename "$real_target")"
    fi
    export RW_SLX RW_RFNS
    echo "[DEBUG] RW_SLX='${RW_SLX}', RW_RFNS='${RW_RFNS}'"

    # ----------------------------------------------------------------
    # 1) set up per-run working directory
    # ----------------------------------------------------------------
    runwhen_workdir="${TMPDIR}/${RW_SLX}/${RW_RFNS}"
    mkdir -p "${runwhen_workdir}"
    echo "RUNWHEN_WORKDIR set to: ${runwhen_workdir}"

    # ----------------------------------------------------------------
    # 2) link credential stores from $HOME → temp dir
    # ----------------------------------------------------------------
    link_dir () {          # $1 = real dir/file, $2 = link to create
        mkdir -p "$(dirname "$1")"
        rm -rf "$2"
        ln -s "$1" "$2"
    }

    # Azure CLI  (directory)
    link_dir "${HOME}/.azure"               "${runwhen_workdir}/.azure"
    azure_config_dir="${runwhen_workdir}/.azure"

    # gcloud SDK (directory)
    link_dir "${HOME}/.config/gcloud"       "${runwhen_workdir}/.gcloud"
    gcloud_config_dir="${runwhen_workdir}/.gcloud"

    # kubeconfig (single file)
    mkdir -p "${HOME}/.kube"               # ensure real path exists
    mkdir -p "${runwhen_workdir}/.kube"
    rm  -f  "${runwhen_workdir}/.kube/config"
    ln  -s  "${HOME}/.kube/config"         "${runwhen_workdir}/.kube/config"
    kubeconfig_path="${runwhen_workdir}/.kube/config"

    # temp area for generated artefacts
    codebundle_temp_dir="${runwhen_workdir}/cb-temp"
    mkdir -p "${codebundle_temp_dir}"

    # export variables for children
    export AZURE_CONFIG_DIR="${azure_config_dir}"
    export CLOUDSDK_CONFIG="${gcloud_config_dir}"
    export KUBECONFIG="${kubeconfig_path}"
    export CODEBUNDLE_TEMP_DIR="${codebundle_temp_dir}"

    echo "AZURE_CONFIG_DIR      = ${AZURE_CONFIG_DIR}"
    echo "CLOUDSDK_CONFIG       = ${CLOUDSDK_CONFIG}"
    echo "KUBECONFIG            = ${KUBECONFIG}"
    echo "CODEBUNDLE_TEMP_DIR   = ${CODEBUNDLE_TEMP_DIR}"

    # ----------------------------------------------------------------
    # 3) decide Robot output directory / file naming
    # ----------------------------------------------------------------
    if [ -d "$real_target" ]; then
        OUTPUT_DIR="$ROBOT_LOG_DIR/$RW_SLX"
        TYPE="codebundle"
    else
        OUTPUT_DIR="$ROBOT_LOG_DIR/$RW_SLX"
        TYPE="$(basename "$real_target" .robot)"
    fi
    echo "[DEBUG] Robot logs => $OUTPUT_DIR (TYPE='${TYPE}')"

    # ----------------------------------------------------------------
    # 4) invoke Robot Framework
    # ----------------------------------------------------------------
    robot --loglevel trace \
          --outputdir "$OUTPUT_DIR" \
          --log     "${TYPE}-log.html" \
          --output  "${TYPE}-output.xml" \
          --report  "${TYPE}-report.html" \
          "${TASKS[@]}" \
          "${POSITIONAL[@]}"
}

ro "$@"